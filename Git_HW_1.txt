GIT Homework 1

Для выполнения задания у вас должен быть установлен для Windows - GitBash.
Создан аккаунт в GitHub

Все шаги сценария выполняйте в терминале GitBush, Terminal, в папке под гитом.

Как отправить ДЗ на проверку.
 1. Создайте текстоовый файл как в первом ДЗ по Terminal.
 2. Сценарий перенесите в этот файл.
 3. На против каждого действия - напишите команду в GitBash

Файл со сценарием и ссылку на свой гит хаб отправляйте менторам на проверку.

JSON
 4. Создать внешний репозиторий c названием JSON.
git init JSON 

 5. Клонировать репозиторий JSON на локальный компьютер.
git clone repository link

 6. Внутри локального JSON создать файл “new.json”.
touch new.json

 7. Добавить файл под гит.
git add .

 8. Закоммитить файл.

git commit -m"Message"

 9. Отправить файл на внешний GitHub репозиторий.
git push

 10. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON.
cat > new.json  write json Data

 11. Отправить изменения на внешний репозиторий.
git add .
git commit -m "Message"
Git push -u origin

 12. Создать файл preferences.json
touch preferences.json

 13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON.
cat > preferences.json write json data

 14. Создать файл skills.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON
cat > skills.json write json data

 15. Отправить сразу 2 файла на внешний репозиторий.
git add preferences.json skills.json
git commit -m "message"
git push -u origin

 16. На веб интерфейсе создать файл bug_report.json.
Add file>Create new file on GitHub

 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
Commit new File

 18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON.
Write JSON Data

 19. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
Commit changes

 20. Синхронизировать внешний и локальный репозиторий JSON
git fetch
git pull


XML
 21. Создать внешний репозиторий c названием XML.
New repository

 22. Клонировать репозиторий XML на локальный компьютер.
Git clone repository link

 23. Внутри локального XML создать файл “new.xml”.
touch new.xml

 24. Добавить файл под гит.
git add .

 25. Закоммитить файл.
git commit -m "Message"
 
 26. Отправить файл на внешний GitHub репозиторий.
git push -u origin
 
 27. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате XML.
vim new.xml insert
<Person is-open="true">
	<fullname>Oksova Mariia</fullname>
	<age>30</age>
	<pets>0</pets>
	<future_desired_salary>2000$</future_desired_salary>
</Person>
Esc
:wq Enter

 28. Отправить изменения на внешний репозиторий.
git add new.xml
git commit -m "message"
git push -u origin

 29. Создать файл preferences.xml
touch preferences.xml

 30. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате XML.
vim preferences.xml insert
<Favorite_things>
        <favorite_movie>Harry Potter</favorite_movie>
        <favorite_TV_series>One Tree Hill</favorite_TV_series>
        <favorite_food>Avocado</favorite_food>
        <favorite_season>Summer</favorite_season>
        <desired_country>USA</desired_country>
</Favorite_things>
Esc
:wq Entergit

 31. Создать файл skills.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML
touch skills.xml

 32. Сделать коммит в одну строку.
git add .; git commit -m"message"

 33. Отправить сразу 2 файла на внешний репозиторий.
git push

 34. На веб интерфейсе создать файл bug_report.xml.
Create new File on Github

 35. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
Commit changes

 36. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML.
Add bug report

 37. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
Commit changes

 38. Синхронизировать внешний и локальный репозиторий XML
git fetch
git push


TXT
 1. Создать внешний репозиторий c названием TXT.
New repository

 2. Клонировать репозиторий TXT на локальный компьютер.
Git clone repository link

 3. Внутри локального TXT создать файл “new.txt”.
touch new.txt

 4. Добавить файл под гит.
git add .

 5. Закоммитить файл.
git commit -m "Message"

 6. Отправить файл на внешний GitHub репозиторий.
git push -u origin

 7. Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате TXT.
cat > new.txt
...
Write text
...

 8. Отправить изменения на внешний репозиторий.
git add .; git commit -m"message" git push

 9. Создать файл preferences.txt
touch preferences.txt

 10. В файл preferences.txt” добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате TXT.
cat > preferences.txt
Write text

 11. Создать файл skills.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT
touch skills.txt

 12. Сделать коммит в одну строку.
git add .; git commit -m"message" 

 13. Отправить сразу 2 файла на внешний репозиторий.
git push

 14. На веб интерфейсе создать файл bug_report.txt.
create new File on Github

 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
Commit changes

 16. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT.
Write text to the file

 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
Commit changes
Git
 18. Синхронизировать внешний и локальный репозиторий TXT
git fetch
git push